@using EZRAC.Risk.UI.Web.Helper;
@model EZRAC.Risk.UI.Web.Helper.PendingClaimPageHelper<EZRAC.Risk.UI.Web.ViewModels.Claims.ClaimInfoViewModel>

<script type="text/javascript">
    $(document).ready(function () {
        $(".show-record-pendingClaims option").each(function () {
            if (this.value.toString() == '@Model.RecordsToShow') {
                $(this).attr("selected", "selected");
            }
        });
    });
</script>
<script src="@Url.Content("~/Scripts/appScripts/pending-approved-claims.js")" type="text/javascript"></script>
    <table class="grey-white-table  dark-blue-header complete complete-width top15 pending-claim-table grey-border-1 bordered-table">
        <tr class="white-color th--min-height">
            <th class='claim-id-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Claim Id", "GetPendingClaims", new { page = 1, sortBy = "Id", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                   @CustomHtmlHelper.SortOrderMark(Model.SortBy, "Id", Model.SortOrder)
                </div>
            </th>
            <th class='claim-status-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Status", "GetPendingClaims", new { page = 1, sortBy = "Status", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                   @CustomHtmlHelper.SortOrderMark(Model.SortBy, "Status", Model.SortOrder)
                </div>
            </th>
            <th class='claim-assignee-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Assignee", "GetPendingClaims", new { page = 1, sortBy = "AssignedToName", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                    @CustomHtmlHelper.SortOrderMark(Model.SortBy, "AssignedToName", Model.SortOrder)
                </div>
            </th>
            <th class='claim-driver-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Contract", "GetPendingClaims", new { page = 1, sortBy = "ContractNumber", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                    @CustomHtmlHelper.SortOrderMark(Model.SortBy, "ContractNumber", Model.SortOrder)
                </div>
            </th>
            <th class='contract-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Driver", "GetPendingClaims", new { page = 1, sortBy = "DriverName", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                    @CustomHtmlHelper.SortOrderMark(Model.SortBy, "DriverName", Model.SortOrder)
                </div>
            </th>
            <th class='claim-unitnumber-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Unit No.", "GetPendingClaims", new { page = 1, sortBy = "UnitNumber", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                    @CustomHtmlHelper.SortOrderMark(Model.SortBy, "UnitNumber", Model.SortOrder)
                </div>
            </th>
            <th class='claim-vehicle-coloumn'>
                <div class="th-min-height">
                    <div class="display-inline">@Ajax.ActionLink("Vehicle", "GetPendingClaims", new { page = 1, sortBy = "Model", sortOrder = Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</div>
                    @CustomHtmlHelper.SortOrderMark(Model.SortBy, "Model", Model.SortOrder)
                </div>
            </th>
            <th class='notes-coloumn'>
                <div class="th-min-height"> Notes </div>
            </th>
            @if (Model.Type == EZRAC.RISK.Services.Contracts.Dtos.ClaimType.PendingApproval.ToString())
            { 
                <th class='approve-coloumn'>
                    <div class="th-min-height"> Approve / Reject </div>
                </th>
            }
            @if (Model.Type == EZRAC.RISK.Services.Contracts.Dtos.ClaimType.Approved.ToString())
            { 
                <th class='approve-coloumn'>
                    <div class="th-min-height"> Status </div>
                </th>
            }
        </tr>

            @foreach (var item in Model.Data)
            {
                    <tr>
                        <td class='claim-id-coloumn '>@Html.ActionLink(String.Format("{0}-{1}", item.CompanyAbbr, item.ClaimID), "ViewClaim", new { id = item.ClaimID })</td>
                        <td class='claim-status-coloumn'> @item.SelectedStatusName</td>
                        <td class='claim-assigned-coloumn1'>@item.SelectedAssignedUserName</td>
                        <td class='contract-coloumn'>@item.ContractNumber </td>
                        <td class='claim-driver-coloumn'> @item.DriverName</td>
                        <td class='claim-unitnumber-coloumn'> @item.UnitNumber</td>
                        <td class='claim-vehicle-coloumn'> @item.VehicleName</td>
                        <td class='notes-coloumn'>
                            <div class=" display-inline relative notes" id="notes" title="Notes">
                                <a class="dropdown-toggle" role="button" aria-expanded="true" aria-haspopup="true" data-toggle="dropdown">
                                    <span class="notes-icon float-left pending-claims-notes">&nbsp;</span>
                                </a>

                                <ul class="dropdown-menu pull-right  tooltip-up-arrow notes-area top15 popup-width" id="notes-id"></ul>
                            </div>

                        </td>
                        @if (Model.Type == EZRAC.RISK.Services.Contracts.Dtos.ClaimType.PendingApproval.ToString())
                        {
                            <td class='approve-coloumn'>
                                <div class=" display-inline">
                                    <a href="javascript:void(0);" alt="Approve" title="Approve"><span class="correct-icon float-left" data-id="@item.ClaimID" data-url="@Url.Action("ApproveClaimNote", "Notes")"></span> </a>
                                    <a href="javascript:void(0);" alt="Reject" title="Reject"><span class="incorrect-icon float-left" data-id="@item.ClaimID" data-url="@Url.Action("RejectClaimNote", "Notes")"></span> </a>
                                </div>
                            </td>
                        }
                        @if (Model.Type == EZRAC.RISK.Services.Contracts.Dtos.ClaimType.Approved.ToString())
                        {
                            <td class='approve-coloumn'>@(item.ApprovalStatus == true.ToString()?"Approved":"Rejected")</td>
                        }
                    </tr>

            }
    </table>
<div class="row padding-horizontal-30 padding-right-20 paging-footer-pending">
   
    <div class="row grey-background grey-border-1">
        @if (Model.TotalRecordCount > 5)
        {
            <div class="float-left">
                <ul class="pagination-list bottom0 top5 ">
                    <li class="pagination-list-item ">
                        @*<a href="javascript:void(0);" aria-label="Next">
                                <div class=arrow-left></div>
                        </a>*@
                        @Ajax.MyActionLink("<div class=arrow-left></div>", "GetPendingClaims", "pendingPageNo border-none", new { page = (Model.CurrentPage == 1) ? Model.CurrentPage : Model.CurrentPage - 1, sortBy = Model.SortBy, sortOrder = !Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" })

                    </li>
                    @for (int i = 1; i <= Model.NumberOfPages; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <li class="pagination-list-item active"><a>@i</a></li>
                        }
                        else
                        {
                            <li class="pagination-list-item"> @Ajax.ActionLink(i.ToString(), "GetPendingClaims", new { page = @i, sortBy = Model.SortBy, sortOrder = !Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" }, new { @class = "pendingPageNo" })</li>
                        }
                    }
                    <li class="pagination-list-item">
                        @*<a href="javascript:void(0);" aria-label="Next">
                                <div class=arrow-right></div>
                        </a>*@
                        @Ajax.MyActionLink("<div class=arrow-right></div>", "GetPendingClaims", "pendingPageNo border-none", new { page = (Model.CurrentPage == Model.NumberOfPages) ? Model.CurrentPage : Model.CurrentPage + 1, sortBy = Model.SortBy, sortOrder = !Model.SortOrder, recordCountToDisplay = "xx", claimType = Model.Type }, new AjaxOptions { UpdateTargetId = "pendingClaimsContainer", OnFailure = "onErrorHandler(xhr)" })
                    </li>
                </ul>
            </div>
        }
        <div class="left20 top3 padding-right-5">
            <div class=" bottom10 top10">
                @if (Model.TotalRecordCount > 5)
                {
                    <span>Items per Page </span> <span>
                        <select class="show-record-pendingClaims">
                            <option value="0">All</option>
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </span>
                }
                <span class="pull-right info"> @Model.PageInfo</span>
            </div>
        </div>
    </div>
</div>
<div id="popup"></div>

<input type="hidden" id="pendingClaimsPageNo" value="@Model.CurrentPage" />
<input type="hidden" id="pendingClaimsSortBy" value="@Model.SortBy" />
<input type="hidden" id="pendingClaimsRecordsToShow" value="@Model.RecordsToShow" />
<input type="hidden" id="pendingClaimsSortOrder" value="@Model.SortOrder" />
<input type="hidden" id="pendingClaimsType" value="@Model.Type"/>
<input type="hidden" id="pendingTotalRecords" value="@Model.TotalRecordCount" />
<input type="hidden" id="claimIdForNotes" />
